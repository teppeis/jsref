<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!DOCTYPE html>
<html lang="en-US" dir="ltr" id="developer-mozilla-org" xmlns:fb="http://www.facebook.com/2008/fbml" xmlns:og="http://ogp.me/ns#">


<body id="" class="html-ltr document" role="document">
<!--[if lte IE 8]>
<noscript><div class="global-notice">
<p><strong>Warning:</strong> The Mozilla Developer Network website employs emerging web standards that may not be fully supported in some versions of Microsoft Internet Explorer. You can improve your experience of this website by enabling JavaScript.</p></div></noscript>
<![endif]-->
  

    

      
  
<!-- top toolbar -->




<section class="entry-content">
  <div class="wrap">
    <div id="content-main" class="full">
      <article class="article" role="main" data-current-revision="421205" data-refresh-message="Your changes were merged. However, something else has been edited, so this page will be refreshed to reflect the changes." data-cancel-edit-message="Abort editing in progress? Your unsaved changes will be discarded.">
      <header id="article-head">
        <div class="title entry-title">
            <h1 class="page-title">eval</h1>
                        

            
            
                                </div>
        

        
               </header>

           
                                  
            
      <div id="wikiArticle" class="page-content boxed">
                
                                <h2 id="Summary" name="Summary">Summary</h2>
<p>Evaluates JavaScript code represented as a string.</p>
<table class="standard-table">
  <thead>
    <tr>
      <th class="header" colspan="2">Core Global Method</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Implemented in</td>
      <td>JavaScript ?</td>
    </tr>
    <tr>
      <td>ECMAScript Edition</td>
      <td>ECMAScript ?</td>
    </tr>
  </tbody>
</table>
<h2 id="Syntax" name="Syntax">Syntax</h2>
<pre class="syntaxbox"><code>eval(<em>string</em>)</code></pre>
<h3 id="Parameters" name="Parameters">Parameters</h3>
<dl>
  <dt>
    <code>string</code></dt>
  <dd>
    A string representing a JavaScript expression, statement, or sequence of statements. The expression can include variables and properties of existing objects.</dd>
</dl>
<div class="note">
  <strong>Note:</strong> Historically <code>eval()</code> had an optional second argument, specifying an object in whose context the evaluation was to be performed. This argument was non-standard, and was removed from SpiderMonkey in Gecko 1.9.1 (Firefox 3.5). See .</div>
<h2 id="Description" name="Description">Description</h2>
<p><code>eval()</code> is a top-level function and is not associated with any object.</p>
<p>The argument of the <code>eval()</code> function is a string. If the string represents an expression, <code>eval()</code> evaluates the expression. If the argument represents one or more JavaScript statements, <code>eval()</code> performs the statements. Do not call <code>eval()</code> to evaluate an arithmetic expression; JavaScript evaluates arithmetic expressions automatically.</p>
<p>If you construct an arithmetic expression as a string, you can use <code>eval()</code> to evaluate it at a later time. For example, suppose you have a variable <code>x</code>. You can postpone evaluation of an expression involving <code>x</code> by assigning the string value of the expression, say "<code>3 * x + 2</code>", to a variable, and then calling <code>eval()</code> at a later point in your script.</p>
<p>If the argument of <code>eval()</code> is not a string, <code>eval()</code> returns the argument unchanged. In the following example, the <code>String</code> constructor is specified, and <code>eval()</code> returns a <code>String</code> object rather than evaluating the string.</p>
<pre class="brush:js">eval(new String("2 + 2")); // returns a String object containing "2 + 2"
eval("2 + 2");             // returns 4
</pre>
<p>You can work around this limitation in a generic fashion by using <code>toString()</code>.</p>
<pre class="brush:js">var expression = new String("2 + 2");
eval(expression.toString());
</pre>
<p>You cannot indirectly use the <code>eval</code> function by invoking it via a name other than <code>eval()</code>; if you do, a runtime error might occur. For example, you should not use the following code:</p>
<pre class="brush:js">var x = 2;
var y = 4;
var myEval = eval;
myEval("x + y");
</pre>
<h2 id="Don.27t_use_eval.21" name="Don.27t_use_eval.21"><a name="dont-use-it">Don't use eval!</a></h2>
<p><code>eval()</code> is a dangerous function, which executes the code it's passed with the privileges of the caller. If you run <code>eval()</code> with a string that could be affected by a malicious party, you may end up running malicious code on the user's machine with the permissions of your webpage / extension. More importantly, third party code can see the scope in which <code>eval()</code> was invoked, which can lead to possible attacks in ways of which the similar <a href="/en-US/docs/JavaScript/Reference/Global_Objects/Function" title="JavaScript/Reference/Global_Objects/Function">Function </a>is not susceptible.</p>
<p><code>eval()</code> is also generally slower than the alternatives, since it has to invoke the JS interpreter, while many other constructs are optimized by modern JS engines.</p>
<p>There are safe (and fast!) alternatives to <code>eval()</code> for common use-cases.</p>
<h3 id="Accessing_member_properties" name="Accessing_member_properties">Accessing member properties</h3>
<p>You should not use <code>eval()</code> to convert property names into properties. Consider the following example. We don't know which property of the object we want to access. This can be done with eval:</p>
<pre class="brush:js">var obj = { a: 20, b: 30 };
var propname = getPropName();  //returns "a" or "b"

eval( "var result = obj." + propname );
</pre>
<p>However, <code>eval()</code> is not necessary here. In fact, its use here is discouraged. Instead, use the <a href="/en-US/docs/JavaScript/Reference/Operators/Member_Operators" title="JavaScript/Reference/Operators/Member_Operators">member operators</a>, which are much faster and safer:</p>
<pre class="brush:js">var obj = { a: 20, b: 30 };
var propname = getPropName();  //returns "a" or "b"
var result = obj[ propname ];  //  obj[ "a" ] is the same as obj.a 
</pre>
<h3 id="Use_functions_instead_of_evaluating_snippets_of_code" name="Use_functions_instead_of_evaluating_snippets_of_code">Use functions instead of evaluating snippets of code</h3>
<p>JavaScript has <a class="external" href="http://en.wikipedia.org/wiki/First-class_function" title="http://en.wikipedia.org/wiki/First-class_function">first-class functions</a>, which means you can pass functions as arguments to other APIs, store them in variables and objects' properties, and so on. Many DOM APIs are designed with this in mind, so you can (and should) write:</p>
<pre>setTimeout(function() { ... }, 1000); // instead of setTimeout(" ... ", 1000);

elt.addEventListener("click", function() { ... } , false); // instead of elt.setAttribute("onclick", "...");</pre>
<p><a href="/en-US/docs/JavaScript/Guide/Closures" title="JavaScript/Guide/Closures">Closures</a> are also helpful as a way to create parametrized functions without concatenating strings.</p>
<h3 id="Parsing_JSON_(converting_strings_to_JavaScript_objects)" name="Parsing_JSON_(converting_strings_to_JavaScript_objects)">Parsing JSON (converting strings to JavaScript objects)</h3>
<p>If the string you're calling <code>eval()</code> on contains data (for example, an array: <code>"[1, 2, 3]"</code>), as opposed to code, you should consider switching to <a href="/en-US/docs/JSON" title="JSON">JSON</a>, which allows the string to use a subset of JavaScript syntax to represent data. See also <a href="/en-US/docs/Downloading_JSON_and_JavaScript_in_extensions" title="Downloading_JSON_and_JavaScript_in_extensions">Downloading JSON and JavaScript in extensions</a>.</p>
<p>Note that since JSON syntax is limited compared to JavaScript syntax, many valid JavaScript literals will not parse as JSON. For example, trailing commas are not allowed in JSON, and property names (keys) in object literals must be enclosed in quotes. Be sure to use a JSON serializer to generate the string, that will be later parsed as JSON.</p>
<h3 id="Pass_data_instead_of_code" name="Pass_data_instead_of_code">Pass data instead of code</h3>
<p>For example, an extension designed to scrape contents of web-pages could have the scraping rules defined in <a href="/en-US/docs/XPath" title="XPath">XPath</a> instead of JavaScript code.</p>
<h3 id="Run_code_with_limited_privileges" name="Run_code_with_limited_privileges">Run code with limited privileges</h3>
<p>If must run code, consider running it with reduced privileges. This advice applies mainly to to extensions and XUL applications, which can use <a href="/en-US/docs/Components.utils.evalInSandbox" title="Components.utils.evalInSandbox">Components.utils.evalInSandbox</a> for this.</p>
<h2 id="Examples" name="Examples">Examples</h2>
<p>The following examples display output using <code>document.write</code>. In server-side JavaScript, you can display the same output by calling the <code>write()</code> function instead of using <code>document.write()</code>.</p>
<h3 id="Example:_Using_eval" name="Example:_Using_eval">Example: Using <code>eval</code></h3>
<p>In the following code, both of the statements containing <code>eval()</code> return 42. The first evaluates the string "<code>x + y + 1</code>"; the second evaluates the string "<code>42</code>".</p>
<pre class="brush:js">var x = 2;
var y = 39;
var z = "42";
eval("x + y + 1"); // returns 42
eval(z);           // returns 42 
</pre>
<h3 id="Example:_Using_eval_to_evaluate_a_string_of_JavaScript_statements" name="Example:_Using_eval_to_evaluate_a_string_of_JavaScript_statements">Example: Using <code>eval</code> to evaluate a string of JavaScript statements</h3>
<p>The following example uses <code>eval()</code> to evaluate the string <code>str</code>. This string consists of JavaScript statements that open an alert dialog box and assign <code>z</code> a value of 42 if <code>x</code> is five, and assigns 0 to <code>z</code> otherwise. When the second statement is executed, <code>eval()</code> will cause these statements to be performed, and it will also evaluate the set of statements and return the value that is assigned to <code>z</code>.</p>
<pre class="brush:js">var x = 5;
var str = "if (x == 5) {alert('z is 42'); z = 42;} else z = 0; ";

document.write("&lt;P&gt;z is ", eval(str));</pre>
<h2 id="Return_value" name="Return_value">Return value</h2>
<p><code>eval()</code> returns the value of the last expression evaluated.</p>
<pre class="brush:js">var str = "if ( a ) { 1+1; } else { 1+2; }";
var a = true;
var b = eval(str);  // returns 2
 
alert("b is : " + b);

a = false;
b = eval(str);  // returns 3

alert("b is : " + b);</pre>
<h2 id="See_also" name="See_also">See also</h2>
<ul>
  <li><a href="/en-US/docs/JavaScript/Reference/Operators/Member_Operators" title="JavaScript/Reference/Operators/Member_Operators">member operators</a></li>
  <li><a href="/en-US/docs/JavaScript/Reference/Global_Objects/uneval" title="JavaScript/Reference/Global_Objects/uneval">&lt;tt&gt;uneval()&lt;/tt&gt;</a></li>
</ul>
                  </div>
    
    <section class="page-meta">
            <section class="page-tags" id="document-tags">
        <h2><i class="icon-tags"/>Tags (1)</h2>
        <div id="deki-page-tags">
          <ul class="tags tagit ui-widget ui-widget-content">
                        <li class="tagit-choice ui-widget-content ui-state-default">
                <a class="text tagit-label" href="/en-US/docs/tag/JavaScript">JavaScript</a>
            </li>
                      </ul>
        </div>
      </section>
      
      
      
      <section id="doc-contributors" role="contentinfo">
        Contributors to this page: <a href="/en-US/profiles/bradleymeck">bradleymeck</a>, <a href="/en-US/profiles/Fdrake1">Fdrake1</a>, <a href="/en-US/profiles/Ahmed%20Masud">Ahmed Masud</a>, <a href="/en-US/profiles/Ruakh">Ruakh</a>, <a href="/en-US/profiles/evilpie">evilpie</a>, <a href="/en-US/profiles/Marcoos">Marcoos</a>, <a href="/en-US/profiles/Sevenspade">Sevenspade</a>, <a href="/en-US/profiles/jorh">jorh</a>, <a href="/en-US/profiles/Potappo">Potappo</a>, <a href="/en-US/profiles/Sheppy">Sheppy</a>, <a href="/en-US/profiles/Nickolay">Nickolay</a>, <a href="/en-US/profiles/trevorh">trevorh</a>, <a href="/en-US/profiles/ignisvulpis">ignisvulpis</a>, <a href="/en-US/profiles/Laser">Laser</a>, <a href="/en-US/profiles/Varmaa">Varmaa</a>, <a href="/en-US/profiles/Ptak82">Ptak82</a>, <a href="/en-US/profiles/Tetrix">Tetrix</a>, <a href="/en-US/profiles/paul.irish">paul.irish</a>, <a href="/en-US/profiles/briankuhn">briankuhn</a>, <a href="/en-US/profiles/ethertank">ethertank</a>, <a href="/en-US/profiles/Mgjbot">Mgjbot</a>, <a href="/en-US/profiles/Kris.kowal">Kris.kowal</a>, <a href="/en-US/profiles/Maian">Maian</a>, <a href="/en-US/profiles/Dria">Dria</a>
                          <br/>
          Last updated by:  
          <a href="/en-US/profiles/briankuhn">briankuhn</a>, 
          <time datetime="2013-05-29T05:50:48-07:00">May 29, 2013 5:50:48 AM</time>
                      <br/>
            Last reviewed by:  
            <a href="/en-US/profiles/briankuhn">briankuhn</a>, 
            <time datetime="2013-05-29T05:50:48-07:00">May 29, 2013 5:50:48 AM</time>
                        </section>
    </section>
  </article>
  <form id="wiki-page-edit" class="editing" method="post" action="/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval$edit">
      <input type="hidden" name="form" id="form" value="rev"/>
      <input type="hidden" name="content" value="" class="entry-content"/>
  </form>
      </div>
   </div>
    </section>  


<section id="footbar">
<div class="wrap">
  <p>
  Is MDN helpful to you? Please <a href="/en-US/docs/Project:Feedback">share your feedback</a> with us. Or join our <a id="dev-mdc-link" href="//lists.mozilla.org/listinfo/dev-mdc">mailing list about improving MDN content</a>.  </p>
</div>
</section>




          
      
      
      
              
                  
  
  
      

    <!-- include syntax highlighting scripts -->
<link rel="stylesheet" media="screen,projection,tv" href="https://developer.cdn.mozilla.net/media/css/syntax-prism-min.css?build=aa6c00e"/>


        
    


</body>
</html>

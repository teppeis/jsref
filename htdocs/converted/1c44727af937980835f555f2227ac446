<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!DOCTYPE html>
<html lang="en-US" dir="ltr" id="developer-mozilla-org" xmlns:fb="http://www.facebook.com/2008/fbml" xmlns:og="http://ogp.me/ns#">


<body id="" class="html-ltr document" role="document">
<!--[if lte IE 8]>
<noscript><div class="global-notice">
<p><strong>Warning:</strong> The Mozilla Developer Network website employs emerging web standards that may not be fully supported in some versions of Microsoft Internet Explorer. You can improve your experience of this website by enabling JavaScript.</p></div></noscript>
<![endif]-->
  

    

      
  
<!-- top toolbar -->




<section class="entry-content">
  <div class="wrap">
    <div id="content-main" class="full">
      <article class="article" role="main" data-current-revision="459955" data-refresh-message="Your changes were merged. However, something else has been edited, so this page will be refreshed to reflect the changes." data-cancel-edit-message="Abort editing in progress? Your unsaved changes will be discarded.">
      <header id="article-head">
        <div class="title entry-title">
            <h1 class="page-title">Proxy</h1>
                        

            
            
                                </div>
        

        
               </header>

           
                                  
            
      <div id="wikiArticle" class="page-content boxed">
                
                                <p/><div class="blockIndicator geckoMinVer standardNote standardNoteBlock">  
    <p>Introduced in Gecko 18.0 (Firefox 18.0 / Thunderbird 18.0 / SeaMonkey 2.15 / Firefox OS 1.0.1)</p>  
</div><p/>
<p/><div class="overheadIndicator nonStandard nonStandardHeader"> 
      <p>Non-standard</p> 
      </div><p/>
<h2 id="Introduction">Introduction</h2>
<p>Proxies are objects for which the programmer has to define the semantics in JavaScript. The default object semantics are implemented in the JavaScript engine, often written in lower-level languages like C++. Proxies let the programmer define most of the behavior of an object in JavaScript. They are said to provide a <strong>meta-programming API</strong>.</p>
<p><strong>Note</strong>: The SpiderMonkey Proxy implementation is a prototype and the Proxy API and semantics specifications are unstable. The SpiderMonkey implementation may not reflect the latest specification draft. It is subject to change anytime. It is provided as an experimental feature. <strong>Do not rely on it for production code.</strong></p>
<p>This page describes the new API (called 'direct_proxies') which is part of Firefox 18. For the previous API (Firefox 17 and below), visit the <a href="/en-US/docs/JavaScript/Old_Proxy_API" title="/en-US/docs/JavaScript/Old_Proxy_API">old proxy API</a> page</p>
<h2 id="Terminology">Terminology</h2>
<dl>
  <dt>
    catch-all mechanism (or "intercession API")</dt>
  <dd>
    The technical term for this feature.</dd>
  <dt>
    proxy</dt>
  <dd>
    The object whose accesses are being intercepted.</dd>
  <dt>
    handler</dt>
  <dd>
    Placeholder object which contains traps.</dd>
  <dt>
    traps</dt>
  <dd>
    The methods that provide property access. This is analogous to the concept of traps in operating systems.</dd>
  <dt>
    target</dt>
  <dd>
    Object which the proxy virtualizes. It is often used as storage backend for the proxy. Invariants regarding object non-extensibility or non-configurable properties are verified against the target.</dd>
</dl>
<h2 id="Proxy_API">Proxy API</h2>
<p>Proxies are new objects; it's not possible to "proxyfy" an existing object. Here is how to create a proxy</p>
<pre class="brush: js">var p = new Proxy(target, handler);
</pre>
<p>Where:</p>
<ul>
  <li><code>target</code> is an object (can be any sort of objects, including a native array, a function or even another proxy).</li>
  <li><code>handler</code> is an object whose properties are functions which define the behavior of the proxy when an operation is performed on it.</li>
</ul>
<h2 id="Handler_API">Handler API</h2>
<p>All traps are optional. If a trap has not been defined, the default behavior is to forward the operation to the target.</p>
<div class="note">
  <p>Note: If the target is an array, the <code>get</code> trap is always required even if it's not necessary in your code. It's a regression in Firefox 21. (<a class="external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=895223" title="Can't JSON stringify a proxy to an array">bug 895223</a>)</p>
</div>
<table class="standard-table">
  <thead>
    <tr>
      <th>JavaScript code</th>
      <th>Handler method</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>Object.getOwnPropertyDescriptor(proxy, name)</code></td>
      <td><code><strong>getOwnPropertyDescriptor</strong><br/>
        function(target, name) -&gt; PropertyDescriptor | undefined</code></td>
      <td>Should return a valid property descriptor object, or <code>undefined</code> to indicate that no property named <code>name</code> exists in the emulated object.</td>
    </tr>
    <tr>
      <td><code>Object.getOwnPropertyNames(proxy)</code></td>
      <td><code><strong>getOwnPropertyNames</strong> function(target) -&gt; [String]</code></td>
      <td>Return an array of all own (non-inherited) property names of the emulated object.</td>
    </tr>
    <tr>
      <td><code>Object.defineProperty(proxy,name,pd)</code></td>
      <td><code><strong>defineProperty</strong> function(target, name, propertyDescriptor) -&gt; any</code></td>
      <td>Define a new property whose attributes are determined by the given <code>propertyDescriptor</code>. The return value of this method is ignored.</td>
    </tr>
    <tr>
      <td><code>delete proxy.name</code></td>
      <td><code><strong>deleteProperty</strong> function(target, name) -&gt; boolean</code></td>
      <td>Delete the named property from the proxy. The boolean return value of this method should indicate whether or not the <code>name</code> property was successfully deleted.</td>
    </tr>
    <tr>
      <td><code>Object.freeze(proxy)</code></td>
      <td><code><strong>freeze</strong> function(target) -&gt; boolean</code></td>
      <td>Freezes the object. The boolean indicates whether the operation was successful</td>
    </tr>
    <tr>
      <td><code>Object.seal(proxy)</code></td>
      <td><code><strong>seal</strong> function(target) -&gt; boolean</code></td>
      <td>Seals the object. The boolean indicates whether the operation was successful</td>
    </tr>
    <tr>
      <td><code>Object.preventExtensions(proxy)</code></td>
      <td><code><strong>preventExtensions</strong> function(target) -&gt; boolean</code></td>
      <td>Makes the object non-extensible. The boolean indicates whether the operation was successful</td>
    </tr>
    <tr>
      <td><code>name in proxy</code></td>
      <td><code><strong>has</strong> function(target, name) -&gt; boolean</code></td>
      <td> </td>
    </tr>
    <tr>
      <td><code>Object.prototype.hasOwnProperty.call(proxy, name)</code></td>
      <td><code><strong>hasOwn</strong> function(target, name) -&gt; boolean</code></td>
      <td> </td>
    </tr>
    <tr>
      <td>
        <p><code>proxy.name</code> (in the context of "getting the value")</p>
        <p><code>receiver.name</code> (if <code>receiver</code> inherits from a proxy and does not override <code>name</code>)</p>
      </td>
      <td><code><strong>get</strong> function(target, name, receiver) -&gt; any</code></td>
      <td><code>receiver</code> is either the proxy or an object that inherits from the proxy.</td>
    </tr>
    <tr>
      <td>
        <p><code>proxy.name = val</code> (in the context of "setting the value")</p>
        <p><code>receiver.name = val</code> (if <code>receiver</code> inherits from a proxy and does not override <code>name</code>)</p>
      </td>
      <td><code><strong>set</strong> function(target, name, val, receiver) -&gt; boolean</code></td>
      <td><code>receiver</code> is either the proxy or an object that inherits from the proxy.</td>
    </tr>
    <tr>
      <td><code>for(prop in proxy){...}</code></td>
      <td><code><strong>enumerate</strong> function(target) -&gt; [String]</code></td>
      <td>From the proxy user point of view, properties appear in the for..in loop in the same order as they are in the returned array. <a class="external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=783829">Known bug</a>: for for..in loops, the iterate trap is called while it should be the enumerate trap</td>
    </tr>
    <tr>
      <td><code>for(prop of proxy){...}</code></td>
      <td><code><strong>iterate</strong> function(target) -&gt; iterator</code></td>
      <td> </td>
    </tr>
    <tr>
      <td><code>Object.keys(proxy)</code></td>
      <td><code><strong>keys</strong> function(target) -&gt; [String]</code></td>
      <td> </td>
    </tr>
    <tr>
      <td><code>proxy.apply(thisValue, args)</code></td>
      <td><code><strong>apply</strong> function(target, thisValue, args) -&gt; any</code></td>
      <td> </td>
    </tr>
    <tr>
      <td><code>new proxy(...args)</code></td>
      <td><code><strong>construct</strong> function(target, args) -&gt; any</code></td>
      <td> </td>
    </tr>
  </tbody>
</table>
<h2 id="Invariants">Invariants</h2>
<p>Even though proxies provide a lot of power to users, some operations are not trapped in order to keep the language consistent:</p>
<ul>
  <li>The double and triple equal (<code>==</code>, <code>===</code>) operator is not trapped. <code>p1 === p2</code> if and only if <code>p1</code> and <code>p2</code> refer to the same proxy.</li>
  <li><code>Object.getPrototypeOf(proxy)</code> unconditionally returns <code>Object.getPrototypeOf(target)</code></li>
  <li><code>typeof proxy</code> unconditionally returns <code>typeof target</code></li>
  <li><code>Object.prototype.toString.call(proxy)</code> unconditionally returns <code>Object.prototype.toString.call(target)</code></li>
</ul>
<h2 id="Examples">Examples</h2>
<h3 id="Very_simple_example">Very simple example</h3>
<p>An object with <code>37</code> as its default value when the property name is not in the object</p>
<pre class="brush: js">var handler = {
    get: function(target, name){
        return name in target?
            target[name] :
            37;
    }
};

var p = new Proxy({}, handler);
p.a = 1;
p.b = undefined;

console.log(p.a, p.b); // 1, undefined
console.log('c' in p, p.c); // false, 37
</pre>
<h3 id="No-op_forwarding_proxy">No-op forwarding proxy</h3>
<p>In this example, we are using a native JavaScript object to which our proxy will forward all operations that are applied to it.</p>
<pre class="brush: js">var target = {};
var p = new Proxy(target, {});

p.a = 37; // operation forwarded to the proxy

console.log(target.a); // 37. The operation has been properly forwarded
</pre>
<h3 id="Validation">Validation</h3>
<p>With a <code>Proxy</code>, you can easily validate the passed value for an object.</p>
<pre class="brush: js">let validator = {
  set: function(obj, prop, value) {
    if (prop === 'age') {
      if (!Number.isInteger(value)) {
        throw new TypeError('The age is not an integer');
      }
      if (value &gt; 200) {
        throw new RangeError('The age seems invalid');
      }
    }

    // The default behavior to store the value
    obj[prop] = value;
  }
};

let person = new Proxy({}, validator);

person.age = 100;
console.log(person.age); // 100
person.age = 'young'; // Throws an exception
person.age = 300; // Throws an exception
</pre>
<h3 id="Manipulating_DOM_nodes">Manipulating DOM nodes</h3>
<p>Sometimes you want to toggle the attribute or class name of two different elements. Here's how:</p>
<pre class="brush: js">let view = new Proxy({
  selected: null
},
{
  set: function(obj, prop, newval) {
    let oldval = obj[prop];

    if (prop === 'selected') {
      if (oldval) {
        oldval.setAttribute('aria-selected', 'false');
      }
      if (newval) {
        newval.setAttribute('aria-selected', 'true');
      }
    }

    // The default behavior to store the value
    obj[prop] = newval;
  }
});

let i1 = view.selected = document.getElementById('item-1');
console.log(i1.getAttribute('aria-selected')); // 'true'

let i2 = view.selected = document.getElementById('item-2');
console.log(i1.getAttribute('aria-selected')); // 'false'
console.log(i2.getAttribute('aria-selected')); // 'true'
</pre>
<h3 id="Value_correction_and_an_extra_property">Value correction and an extra property</h3>
<p>The <code>products</code> proxy object evaluates the passed value and convert it to an array if needed. The object also supports an extra property called <code>latestBrowser</code> both as a getter and a setter.</p>
<pre class="brush: js">let products = new Proxy({
  browsers: ['Internet Explorer', 'Netscape']
},
{
  get: function(obj, prop) {
    // An extra property
    if (prop === 'latestBrowser') {
      return obj.browsers[obj.browsers.length - 1];
    }

    // The default behavior to return the value
    return obj[prop];
  },
  set: function(obj, prop, value) {
    // An extra property
    if (prop === 'latestBrowser') {
      obj.browsers.push(value);
      return;
    }

    // Convert the value if it is not an array
    if (typeof value === 'string') {
      value = [value];
    }

    // The default behavior to store the value
    obj[prop] = value;
  }
});

console.log(products.browsers); // ['Internet Explorer', 'Netscape']
products.browsers = 'Firefox'; // pass a string (by mistake)
console.log(products.browsers); // ['Firefox'] &lt;- no problem, the value is an array

products.latestBrowser = 'Chrome';
console.log(products.browsers); // ['Firefox', 'Chrome']
console.log(products.latestBrowser); // 'Chrome'
</pre>
<h3 id="Finding_an_array_item_object_by_its_property">Finding an array item object by its property</h3>
<p>This proxy extends an array with some utility features. As you see, you can flexibly "define" properties without using <a href="/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperties"><code>Object.defineProperties</code></a>. This example can be adapted to find a table row by its cell. In that case, the target will be <a href="/en-US/docs/DOM/table.rows"><code>table.rows</code></a>.</p>
<pre class="brush: js">let products = new Proxy([
  { name: 'Firefox', type: 'browser' },
  { name: 'SeaMonkey', type: 'browser' },
  { name: 'Thunderbird', type: 'mailer' }
],
{
  get: function(obj, prop) {
    // The default behavior to return the value; prop is usually an integer
    if (prop in obj) {
      return obj[prop];
    }

    // Get the number of products; an alias of products.length
    if (prop === 'number') {
      return obj.length;
    }

    let result, types = {};

    for (let product of obj) {
      if (product.name === prop) {
        result = product;
      }
      if (types[product.type]) {
        types[product.type].push(product);
      } else {
        types[product.type] = [product];
      }
    }

    // Get a product by name
    if (result) {
      return result;
    }

    // Get products by type
    if (prop in types) {
      return types[prop];
    }

    // Get product types
    if (prop === 'types') {
      return Object.keys(types);
    }

    return undefined;
  }
});

console.log(products[0]); // { name: 'Firefox', type: 'browser' }
console.log(products['Firefox']); // { name: 'Firefox', type: 'browser' }
console.log(products['Chrome']); // undefined
console.log(products.browser); // [{ name: 'Firefox', type: 'browser' }, { name: 'SeaMonkey', type: 'browser' }]
console.log(products.types); // ['browser', 'mailer']
console.log(products.number); // 3
</pre>
<h3 id="A_complete_traps_list_example">A complete <code>traps</code> list example</h3>
<p>Now in order to create a complete sample <code>traps</code> list, for didactic purposes, we will try to proxify a <em>non native</em> object that is particularly suited to this type of operation: the <code>docCookies</code> global object created by <a href="https://developer.mozilla.org/en-US/docs/DOM/document.cookie#A_little_framework.3A_a_complete_cookies_reader.2Fwriter_with_full_unicode_support" title="https://developer.mozilla.org/en-US/docs/DOM/document.cookie#A_little_framework.3A_a_complete_cookies_reader.2Fwriter_with_full_unicode_support">the "little framework" published on the <code>document.cookie</code> page</a>.</p>
<pre class="brush: js">/*
  var docCookies = ... get the "docCookies" object here:  
  https://developer.mozilla.org/en-US/docs/DOM/document.cookie#A_little_framework.3A_a_complete_cookies_reader.2Fwriter_with_full_unicode_support
*/

var docCookies = new Proxy(docCookies, {
  "get": function (oTarget, sKey) {
    return oTarget[sKey] || oTarget.getItem(sKey) || undefined;
  },
  "set": function (oTarget, sKey, vValue) {
    if (sKey in oTarget) { return false; }
    return oTarget.setItem(sKey, vValue);
  },
  "delete": function (oTarget, sKey) {
    if (sKey in oTarget) { return false; }
    return oTarget.removeItem(sKey);
  },
  "enumerate": function (oTarget, sKey) {
    return oTarget.keys();
  },
  "iterate": function (oTarget, sKey) {
    return oTarget.keys();
  },
  "keys": function (oTarget, sKey) {
    return oTarget.keys();
  },
  "has": function (oTarget, sKey) {
    return sKey in oTarget || oTarget.hasItem(sKey);
  },
  "hasOwn": function (oTarget, sKey) {
    return oTarget.hasItem(sKey);
  },
  "defineProperty": function (oTarget, sKey, oDesc) {
    if (oDesc &amp;&amp; "value" in oDesc) { oTarget.setItem(sKey, oDesc.value); }
    return oTarget;
  },
  "getPropertyNames": function (oTarget) {
    return Object.getPropertyNames(oTarget).concat(oTarget.keys());
  },
  "getOwnPropertyNames": function (oTarget) {
    return Object.getOwnPropertyNames(oTarget).concat(oTarget.keys());
  },
  "getPropertyDescriptor": function (oTarget, sKey) {
    var vValue = oTarget[sKey] || oTarget.getItem(sKey)
    return vValue ? {
      "value": vValue,
      "writable": true,
      "enumerable": true,
      "configurable": false
    } : undefined;
  },
  "getOwnPropertyDescriptor": function (oTarget, sKey) {
    var vValue = oTarget.getItem(sKey);
    return vValue ? {
      "value": vValue,
      "writable": true,
      "enumerable": true,
      "configurable": false
    } : undefined;
  },
  "fix":  function (oTarget) {
    return "not implemented yet!";
  },
});

/* Cookies test */

alert(docCookies.my_cookie1 = "First value");
alert(docCookies.getItem("my_cookie1"));

docCookies.setItem("my_cookie1", "Changed value");
alert(docCookies.my_cookie1);</pre>
<h2 id="See_also">See also</h2>
<ul>
  <li><a class="external" href="http://jsconf.eu/2010/speaker/be_proxy_objects.html">"Proxies are awesome" Brendan Eich presentation at JSConf</a> (<a class="external" href="http://www.slideshare.net/BrendanEich/metaprog-5303821">slides</a>)</li>
  <li><a class="external" href="http://wiki.ecmascript.org/doku.php?id=harmony:proxies">ECMAScript Harmony Proxy proposal page</a> and <a class="external" href="http://wiki.ecmascript.org/doku.php?id=harmony:proxies_semantics">ECMAScript Harmony proxy semantics page</a></li>
  <li><a class="external" href="http://soft.vub.ac.be/~tvcutsem/proxies/">Tutorial on proxies</a></li>
  <li><a href="/en-US/docs/JavaScript/Old_Proxy_API" title="/en-US/docs/JavaScript/Old_Proxy_API">Old Proxy API page</a></li>
  <li><a href="/en-US/docs/JavaScript/Reference/Global_Objects/Object/watch"><code>Object.watch</code></a> is a non-standard feature but has been suppoted in Gecko for a long time.</li>
</ul>
<h2 id="Licensing_note">Licensing note</h2>
<p>Some content (text, examples) in this page has been copied or adapted from the <a class="external" href="http://wiki.ecmascript.org/doku.php">ECMAScript wiki</a> which content is licensed <a class="external" href="http://creativecommons.org/licenses/by-nc-sa/2.0/">CC 2.0 BY-NC-SA</a></p>
                  </div>
    
    <section class="page-meta">
            <section class="page-tags" id="document-tags">
        <h2><i class="icon-tags"/>Tags (2)</h2>
        <div id="deki-page-tags">
          <ul class="tags tagit ui-widget ui-widget-content">
                        <li class="tagit-choice ui-widget-content ui-state-default">
                <a class="text tagit-label" href="/en-US/docs/tag/NeedsJSVersion">NeedsJSVersion</a>
            </li>
                        <li class="tagit-choice ui-widget-content ui-state-default">
                <a class="text tagit-label" href="/en-US/docs/tag/ECMAScript6">ECMAScript6</a>
            </li>
                      </ul>
        </div>
      </section>
      
      
      
      <section id="doc-contributors" role="contentinfo">
        Contributors to this page: <a href="/en-US/profiles/Sheppy">Sheppy</a>, <a href="/en-US/profiles/Jifeon">Jifeon</a>, <a href="/en-US/profiles/dbruant">dbruant</a>, <a href="/en-US/profiles/Yoshino">Yoshino</a>, <a href="/en-US/profiles/nickfargo">nickfargo</a>, <a href="/en-US/profiles/jswisher">jswisher</a>, <a href="/en-US/profiles/Nickolay">Nickolay</a>, <a href="/en-US/profiles/gartz">gartz</a>, <a href="/en-US/profiles/tomvc">tomvc</a>, <a href="/en-US/profiles/Brendan">Brendan</a>, <a href="/en-US/profiles/Brettz9">Brettz9</a>, <a href="/en-US/profiles/fusionchess">fusionchess</a>, <a href="/en-US/profiles/Mook(as)">Mook(as)</a>, <a href="/en-US/profiles/BlindWanderer">BlindWanderer</a>
                          <br/>
          Last updated by:  
          <a href="/en-US/profiles/Yoshino">Yoshino</a>, 
          <time datetime="2013-08-28T05:14:16-07:00">Aug 28, 2013 5:14:16 AM</time>
                      <br/>
            Last reviewed by:  
            <a href="/en-US/profiles/Yoshino">Yoshino</a>, 
            <time datetime="2013-08-28T05:14:16-07:00">Aug 28, 2013 5:14:16 AM</time>
                        </section>
    </section>
  </article>
  <form id="wiki-page-edit" class="editing" method="post" action="/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy$edit">
      <input type="hidden" name="form" id="form" value="rev"/>
      <input type="hidden" name="content" value="" class="entry-content"/>
  </form>
      </div>
   </div>
    </section>  


<section id="footbar">
<div class="wrap">
  <p>
  Is MDN helpful to you? Please <a href="/en-US/docs/Project:Feedback">share your feedback</a> with us. Or join our <a id="dev-mdc-link" href="//lists.mozilla.org/listinfo/dev-mdc">mailing list about improving MDN content</a>.  </p>
</div>
</section>




          
      
      
      
              
                  
  
  
      

    <!-- include syntax highlighting scripts -->
<link rel="stylesheet" media="screen,projection,tv" href="https://developer.cdn.mozilla.net/media/css/syntax-prism-min.css?build=aa6c00e"/>


        
    


</body>
</html>

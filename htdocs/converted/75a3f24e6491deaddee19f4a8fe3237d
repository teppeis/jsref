<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!DOCTYPE html>
<html lang="en-US" dir="ltr" id="developer-mozilla-org" xmlns:fb="http://www.facebook.com/2008/fbml" xmlns:og="http://ogp.me/ns#">


<body id="" class="html-ltr document" role="document">
<!--[if lte IE 8]>
<noscript><div class="global-notice">
<p><strong>Warning:</strong> The Mozilla Developer Network website employs emerging web standards that may not be fully supported in some versions of Microsoft Internet Explorer. You can improve your experience of this website by enabling JavaScript.</p></div></noscript>
<![endif]-->
  

    

      
  
<!-- top toolbar -->




<section class="entry-content">
  <div class="wrap">
    <div id="content-main" class="full">
      <article class="article" role="main" data-current-revision="417163" data-refresh-message="Your changes were merged. However, something else has been edited, so this page will be refreshed to reflect the changes." data-cancel-edit-message="Abort editing in progress? Your unsaved changes will be discarded.">
      <header id="article-head">
        <div class="title entry-title">
            <h1 class="page-title">Function.prototype.apply</h1>
                        

            
            
                                </div>
        

        
               </header>

           
                                  
            
      <div id="wikiArticle" class="page-content boxed">
                
                                <h2 id="Summary" name="Summary">Summary</h2>
<p>Calls a function with a given <code>this</code> value and <code>arguments</code> provided as an array (or an <a href="/en-US/docs/JavaScript/Guide/Predefined_Core_Objects#Working_with_Array-like_objects" title="/en-US/docs/JavaScript/Guide/Predefined_Core_Objects#Working_with_Array-like_objects">array like object</a>).</p>
<div class="note">
  <strong>NOTE:</strong> While the syntax of this function is almost identical to that of <a href="/en-US/docs/JavaScript/Reference/Global_Objects/Function/call" title="/en-US/docs/JavaScript/Reference/Global_Objects/Function/call"><code>call()</code></a>, the fundamental difference is that <code>call()</code> accepts an argument list, while <code>apply()</code> accepts a single array of arguments.</div>
<table class="standard-table">
  <thead>
    <tr>
      <th class="header" colspan="2" scope="row">Method of <a href="/en-US/docs/JavaScript/Reference/Global_Objects/Function" title="JavaScript/Reference/Global_Objects/Function">Function</a></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Implemented in</td>
      <td>JavaScript 1.3</td>
    </tr>
    <tr>
      <td>ECMAScript Edition</td>
      <td>ECMA-262 3rd Edition</td>
    </tr>
  </tbody>
</table>
<h2 id="Syntax" name="Syntax">Syntax</h2>
<pre class="syntaxbox"><code><em>fun</em>.apply(<em>thisArg</em>[, <em>argsArray</em>])</code></pre>
<h3 id="Parameters" name="Parameters">Parameters</h3>
<dl>
  <dt>
    <code>thisArg</code></dt>
  <dd>
    The value of <code>this</code> provided for the call to <em><code>fun</code></em>. Note that this may not be the actual value seen by the method: if the method is a function in non-strict mode code, <code>null</code> and <code>undefined</code> will be replaced with the global object, and primitive values will be boxed.</dd>
  <dt>
    <code>argsArray</code></dt>
  <dd>
    An array like object, specifying the arguments with which <em><code>fun</code></em> should be called, or <code>null</code> or <a href="/en-US/docs/JavaScript/Reference/Global_Objects/undefined" title="JavaScript/Reference/Global_Properties/undefined">undefined</a> if no arguments should be provided to the function.</dd>
</dl>
<div>
  <div class="blockIndicator standardNote standardNoteBlock"> 
    <p><a class="external" href="http://developer.mozilla.org/en-US/docs/JavaScript/New_in_JavaScript/1.8.5">JavaScript 1.8.5</a> note</p> 
    <p style="font-weight: 400;">Starting in JavaScript 1.8.5 (Firefox 4), this method works according to the ECMAScript 5 specification. That is, the arguments can be a generic array-like object instead of an array.</p> 
</div></div>
<p>See <a class="external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=562448" rel="external" title="">bug 562448</a> for details on the change described above.</p>
<h2 id="Description" name="Description">Description</h2>
<p>You can assign a different <code>this</code> object when calling an existing function. <code>this</code> refers to the current object, the calling object. With <code>apply</code>, you can write a method once and then inherit it in another object, without having to rewrite the method for the new object.</p>
<p><code>apply</code> is very similar to <code><a href="/en-US/docs/JavaScript/Reference/Global_Objects/Function/call" title="JavaScript/Reference/Global_Objects/Function/call">call</a></code>, except for the type of arguments it supports. You can use an arguments array instead of a named set of parameters. With <code>apply</code>, you can use an array literal, for example, <code><em>fun</em>.apply(this, ['eat', 'bananas'])</code>, or an <code>Array</code> object, for example, <code><em>fun</em>.apply(this, new Array('eat', 'bananas'))</code>.</p>
<p>You can also use <code><a href="/en-US/docs/JavaScript/Reference/Functions_and_function_scope/arguments" title="JavaScript/Reference/Functions_and_function_scope/arguments">arguments</a></code> for the <code>argsArray</code> parameter. <code>arguments</code> is a local variable of a function. It can be used for all unspecified arguments of the called object. Thus, you do not have to know the arguments of the called object when you use the <code>apply</code> method. You can use <code>arguments</code> to pass all the arguments to the called object. The called object is then responsible for handling the arguments.</p>
<p>Since ECMAScript 5th Edition you can also use any kind of object which is array like, so in practice this means it's going to have a property <code>length</code> and integer properties in the range <code>[0...length)</code>. As an example you can now use a <a href="/en-US/docs/DOM/NodeList" title="DOM/NodeList">NodeList</a> or a own custom object like <code>{'length': 2, '0': 'eat', '1': 'bananas'}</code>.</p>
<div>
  <div class="note"><strong>Note:</strong> Most browsers, including Chrome 14 and Internet Explorer 9, still do not accept array like objects and will throw an exception.</div></div>
<h2 id="Examples" name="Examples">Examples</h2>
<h3 id="Using_apply_to_chain_constructors" name="Using_apply_to_chain_constructors">Using <code>apply</code> to chain constructors</h3>
<p>You can use <code>apply</code> to chain <a href="/en-US/docs/JavaScript/Reference/Operators/new" title="JavaScript/Reference/Operators/new">constructors</a> for an object, similar to Java. In the following example we will create a global <a href="/en-US/docs/JavaScript/Reference/Global_Objects/Function" title="JavaScript/Reference/Global_Objects/Function"><code>Function</code></a> method called <code>construct</code>, which will make you able to use an array-like object with a constructor instead of an arguments list.</p>
<pre class="brush: js">Function.prototype.construct = function (aArgs) {
    var fConstructor = this, fNewConstr = function () { fConstructor.apply(this, aArgs); };
    fNewConstr.prototype = fConstructor.prototype;
    return new fNewConstr();
};</pre>
<p>Example usage:</p>
<pre class="brush: js">function MyConstructor () {
    for (var nProp = 0; nProp &lt; arguments.length; nProp++) {
        this["property" + nProp] = arguments[nProp];
    }
}

var myArray = [4, "Hello world!", false];
var myInstance = MyConstructor.construct(myArray);

alert(myInstance.property1); // alerts "Hello world!"
alert(myInstance instanceof MyConstructor); // alerts "true"
alert(myInstance.constructor); // alerts "MyConstructor"</pre>
<div class="note">
  <strong>Note:</strong> This non-native <code>Function.construct</code> method will not work with some native constructors (like <a href="/en-US/docs/JavaScript/Reference/Global_Objects/Date" title="JavaScript/Reference/Global_Objects/Date"><code>Date</code></a>, for example). In these cases you have to use the <a href="/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind#Bound_functions_used_as_constructors" title="JavaScript/Reference/Global_Objects/Function/bind#Bound_functions_used_as_constructors"><code>Function.bind</code></a> method (for example, imagine to have an array like the following, to be used with <code>Date</code> constructor: <code>[2012, 11, 4]</code>; in this case you have to write something like: <code>new (Function.prototype.bind.apply(Date, [null].concat([2012, 11, 4])))()</code> – anyhow this is not the best way to do things and probably should not be used in any production environment).</div>
<h3 id="apply_and_built-in_functions" name="apply_and_built-in_functions"><code>apply</code> and built-in functions</h3>
<p>Clever usage of <code>apply</code> allows you to use built-ins functions for some tasks that otherwise probably would have been written by looping over the array values. As an example here we are going to use Math.max/Math.min to find out the maximum/minimum value in an array.</p>
<pre class="brush: js">/* min/max number in an array */
var numbers = [5, 6, 2, 3, 7];

/* using Math.min/Math.max apply */
var max = Math.max.apply(null, numbers); /* This about equal to Math.max(numbers[0], ...) or Math.max(5, 6, ..) */
var min = Math.min.apply(null, numbers);

/* vs. simple loop based algorithm */
max = -Infinity, min = +Infinity;

for (var i = 0; i &lt; numbers.length; i++) {
  if (numbers[i] &gt; max)
    max = numbers[i];
  if (numbers[i] &lt; min) 
    min = numbers[i];
}</pre>
<p>But beware: in using <code>apply</code> this way, you run the risk of exceeding the JavaScript engine's argument length limit. The consequences of applying a function with too many arguments (think more than tens of thousands of arguments) vary across engines (JavaScriptCore has hard-coded <a class="external link-https" href="https://bugs.webkit.org/show_bug.cgi?id=80797">argument limit of 65536</a>), because the limit (indeed even the nature of any excessively-large-stack behavior) is unspecified. Some engines will throw an exception. More perniciously, others will arbitrarily limit the number of arguments actually passed to the applied function. (To illustrate this latter case: if such an engine had a limit of four arguments [actual limits are of course significantly higher], it would be as if the arguments <code>5, 6, 2, 3</code> had been passed to <code>apply</code> in the examples above, rather than the full array.) If your value array might grow into the tens of thousands, use a hybrid strategy: apply your function to chunks of the array at a time:</p>
<pre class="brush: js">function minOfArray(arr) {
  var min = Infinity;
  var QUANTUM = 32768;

  for (var i = 0, len = arr.length; i &lt; len; i += QUANTUM) {
    var submin = Math.min.apply(null, arr.slice(i, Math.min(i + QUANTUM, len)));
    min = Math.min(submin, min);
  }

  return min;
}

var min = minOfArray([5, 6, 2, 3, 7]);</pre>
<h2 id="See_also" name="See_also">See also</h2>
<ul>
  <li><a href="/en-US/docs/JavaScript/Reference/Global_Objects/Function/call" title="JavaScript/Reference/Global_Objects/Function/call">call</a>, <a href="/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind" title="JavaScript/Reference/Global_Objects/Function/bind">bind</a>, <a href="/en-US/docs/JavaScript/Reference/Functions_and_function_scope/arguments" title="JavaScript/Reference/Functions_and_function_scope/arguments">arguments</a></li>
</ul>
                  </div>
    
    <section class="page-meta">
            <section class="page-tags" id="document-tags">
        <h2><i class="icon-tags"/>Tags (2)</h2>
        <div id="deki-page-tags">
          <ul class="tags tagit ui-widget ui-widget-content">
                        <li class="tagit-choice ui-widget-content ui-state-default">
                <a class="text tagit-label" href="/en-US/docs/tag/apply">apply</a>
            </li>
                        <li class="tagit-choice ui-widget-content ui-state-default">
                <a class="text tagit-label" href="/en-US/docs/tag/JavaScript">JavaScript</a>
            </li>
                      </ul>
        </div>
      </section>
      
      
      
      <section id="doc-contributors" role="contentinfo">
        Contributors to this page: <a href="/en-US/profiles/fusionchess">fusionchess</a>, <a href="/en-US/profiles/jswisher">jswisher</a>, <a href="/en-US/profiles/himoundary">himoundary</a>, <a href="/en-US/profiles/ronin712">ronin712</a>, <a href="/en-US/profiles/user01">user01</a>, <a href="/en-US/profiles/evilpie">evilpie</a>, <a href="/en-US/profiles/rwaldron">rwaldron</a>, <a href="/en-US/profiles/Napotopia">Napotopia</a>, <a href="/en-US/profiles/techlivezheng">techlivezheng</a>, <a href="/en-US/profiles/Sheppy">Sheppy</a>, <a href="/en-US/profiles/CristianTincu">CristianTincu</a>, <a href="/en-US/profiles/qw3n">qw3n</a>, <a href="/en-US/profiles/Nickolay">Nickolay</a>, <a href="/en-US/profiles/cronco">cronco</a>, <a href="/en-US/profiles/mattcg">mattcg</a>, <a href="/en-US/profiles/Waldo">Waldo</a>, <a href="/en-US/profiles/Inimino">Inimino</a>, <a href="/en-US/profiles/AllenZ">AllenZ</a>, <a href="/en-US/profiles/kswedberg">kswedberg</a>, <a href="/en-US/profiles/anthonyryan1">anthonyryan1</a>, <a href="/en-US/profiles/PaulNovitski">PaulNovitski</a>, <a href="/en-US/profiles/wormboy">wormboy</a>, <a href="/en-US/profiles/tiangolo">tiangolo</a>, <a href="/en-US/profiles/.void.">.void.</a>, <a href="/en-US/profiles/Dexbol">Dexbol</a>, <a href="/en-US/profiles/Jackytck">Jackytck</a>, <a href="/en-US/profiles/Paul%20Visco1">Paul Visco1</a>, <a href="/en-US/profiles/nobuoka">nobuoka</a>, <a href="/en-US/profiles/ethertank">ethertank</a>, <a href="/en-US/profiles/Mgjbot">Mgjbot</a>, <a href="/en-US/profiles/tehsis">tehsis</a>, <a href="/en-US/profiles/Maian">Maian</a>, <a href="/en-US/profiles/Dria">Dria</a>
                          <br/>
          Last updated by:  
          <a href="/en-US/profiles/Sheppy">Sheppy</a>, 
          <time datetime="2013-05-28T08:32:51-07:00">May 28, 2013 8:32:51 AM</time>
                      <br/>
            Last reviewed by:  
            <a href="/en-US/profiles/techlivezheng">techlivezheng</a>, 
            <time datetime="2013-04-06T06:21:12-07:00">Apr 6, 2013 6:21:12 AM</time>
                        </section>
    </section>
  </article>
  <form id="wiki-page-edit" class="editing" method="post" action="/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply$edit">
      <input type="hidden" name="form" id="form" value="rev"/>
      <input type="hidden" name="content" value="" class="entry-content"/>
  </form>
      </div>
   </div>
    </section>  


<section id="footbar">
<div class="wrap">
  <p>
  Is MDN helpful to you? Please <a href="/en-US/docs/Project:Feedback">share your feedback</a> with us. Or join our <a id="dev-mdc-link" href="//lists.mozilla.org/listinfo/dev-mdc">mailing list about improving MDN content</a>.  </p>
</div>
</section>




          
      
      
      
              
                  
  
  
      

    <!-- include syntax highlighting scripts -->
<link rel="stylesheet" media="screen,projection,tv" href="https://developer.cdn.mozilla.net/media/css/syntax-prism-min.css?build=aa6c00e"/>


        
    


</body>
</html>

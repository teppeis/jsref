<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!DOCTYPE html>
<html lang="en-US" dir="ltr" id="developer-mozilla-org" xmlns:fb="http://www.facebook.com/2008/fbml" xmlns:og="http://ogp.me/ns#">


<body id="" class="html-ltr document" role="document">
<!--[if lte IE 8]>
<noscript><div class="global-notice">
<p><strong>Warning:</strong> The Mozilla Developer Network website employs emerging web standards that may not be fully supported in some versions of Microsoft Internet Explorer. You can improve your experience of this website by enabling JavaScript.</p></div></noscript>
<![endif]-->
  

    

      
  
<!-- top toolbar -->




<section class="entry-content">
  <div class="wrap">
    <div id="content-main" class="full">
      <article class="article" role="main" data-current-revision="418351" data-refresh-message="Your changes were merged. However, something else has been edited, so this page will be refreshed to reflect the changes." data-cancel-edit-message="Abort editing in progress? Your unsaved changes will be discarded.">
      <header id="article-head">
        <div class="title entry-title">
            <h1 class="page-title">new</h1>
                        

            
            
                                </div>
        

        
               </header>

           
                        <div class="warning review-technical"><p>This article is in need of a technical review.</p></div>
                            
            
      <div id="wikiArticle" class="page-content boxed">
                
                                <h2 id="Summary" name="Summary">Summary</h2>
<p>The <code>new</code> operator creates an instance of a user-defined object type or of one of the built-in object types that has a constructor function.</p>
<table class="standard-table">
  <tbody>
    <tr>
      <td class="header" colspan="2">Operator</td>
    </tr>
    <tr>
      <td>Implemented in:</td>
      <td>JavaScript 1.0</td>
    </tr>
    <tr>
      <td>ECMA Version:</td>
      <td>ECMA-262</td>
    </tr>
  </tbody>
</table>
<h2 id="Syntax" name="Syntax">Syntax</h2>
<pre><code>new <em>constructor</em>[([<em>arguments</em>])]</code></pre>
<h3 id="Parameters" name="Parameters">Parameters</h3>
<dl>
  <dt>
    <code>constructor</code></dt>
  <dd>
    A function that specifies the type of the object instance.</dd>
</dl>
<dl>
  <dt>
    <code>arguments</code></dt>
  <dd>
    A list of values that the <code>constructor</code> will be called with.</dd>
</dl>
<h2 id="Description" name="Description">Description</h2>
<p>Creating a user-defined object requires two steps:</p>
<ol>
  <li>Define the object type by writing a function.</li>
  <li>Create an instance of the object with <code>new</code>.</li>
</ol>
<p>To define an object type, create a function for the object type that specifies its name and properties. An object can have a property that is itself another object. See the examples below.</p>
<p>When the code <code>new <em>foo</em>(...)</code> is executed, the following things happen:</p>
<ol>
  <li>A new object is created, inheriting from <code><em>foo</em>.prototype</code>.</li>
  <li>The constructor function <code><em>foo</em></code> is called with the specified arguments and <code><a href="/en-US/docs/JavaScript/Reference/Operators/this" title="this">this</a></code> bound to the newly created object. <code>new <em>foo</em></code> is equivalent to <code>new <em>foo</em>()</code>, i.e. if no argument list is specified, <code><em>foo</em></code> is called without arguments.</li>
  <li>The object returned by the constructor function becomes the result of the whole <code>new</code> expression. If the constructor function doesn't explicitly return an object, the object created in step 1 is used instead. (Normally constructors don't return a value, but they can choose to do so if they want to override the normal object creation process.)</li>
</ol>
<p>You can always add a property to a previously defined object. For example, the statement <code>car1.color = "black"</code> adds a property <code>color</code> to <code>car1</code>, and assigns it a value of "<code>black</code>". However, this does not affect any other objects. To add the new property to all objects of the same type, you must add the property to the definition of the <code>Car</code> object type.</p>
<p>You can add a shared property to a previously defined object type by using the <code><a href="/en-US/docs/JavaScript/Reference/Global_Objects/Function/prototype" title="en-US/docs/JavaScript/Reference/Global_Objects/Function/prototype">Function.prototype</a></code> property. This defines a property that is shared by all objects created with that function, rather than by just one instance of the object type. The following code adds a color property with value <code>null</code> to all objects of type <code>car</code>, and then overwrites that value with the string "<code>black</code>" only in the instance object <code>car1</code>. For more information, see <a href="/en-US/docs/JavaScript/Reference/Global_Objects/Function/prototype" title="en-US/docs/JavaScript/Reference/Global_Objects/Function/prototype">prototype</a>.</p>
<pre> function Car() {}
 car1 = new Car()
 
 alert(car1.color)           // undefined
 
 Car.prototype.color = null
 alert(car1.color)           // null
 
 car1.color = "black"
 alert(car1.color)           // black
</pre>
<h2 id="Examples" name="Examples">Examples</h2>
<h3 id="Example:_Object_type_and_object_instance" name="Example:_Object_type_and_object_instance">Example: Object type and object instance</h3>
<p>Suppose you want to create an object type for cars. You want this type of object to be called <code>car</code>, and you want it to have properties for make, model, and year. To do this, you would write the following function:</p>
<pre>function car(make, model, year) {
   this.make = make;
   this.model = model;
   this.year = year;
}
</pre>
<p>Now you can create an object called <code>mycar</code> as follows:</p>
<pre>var mycar = new car("Eagle", "Talon TSi", 1993);
</pre>
<p>This statement creates <code>mycar</code> and assigns it the specified values for its properties. Then the value of <code>mycar.make</code> is the string "Eagle", <code>mycar.year</code> is the integer 1993, and so on.</p>
<p>You can create any number of <code>car</code> objects by calls to <code>new</code>. For example:</p>
<pre>var kenscar = new car("Nissan", "300ZX", 1992);
</pre>
<h3 id="Example:_Object_property_that_is_itself_another_object" name="Example:_Object_property_that_is_itself_another_object">Example: Object property that is itself another object</h3>
<p>Suppose you define an object called <code>person</code> as follows:</p>
<pre>function person(name, age, sex) {
   this.name = name;
   this.age = age;
   this.sex = sex;
}
</pre>
<p>And then instantiate two new <code>person</code> objects as follows:</p>
<pre>var rand = new person("Rand McNally", 33, "M");
var ken = new person("Ken Jones", 39, "M");
</pre>
<p>Then you can rewrite the definition of <code>car</code> to include an <code>owner</code> property that takes a person object, as follows:</p>
<pre>function car(make, model, year, owner) {
   this.make = make;
   this.model = model;
   this.year = year;
   this.owner = owner;
}
</pre>
<p>To instantiate the new objects, you then use the following:</p>
<pre>var car1 = new car("Eagle", "Talon TSi", 1993, rand);
var car2 = new car("Nissan", "300ZX", 1992, ken);
</pre>
<p>Instead of passing a literal string or integer value when creating the new objects, the above statements pass the objects <code>rand</code> and <code>ken</code> as the parameters for the owners. To find out the name of the owner of <code>car2</code>, you can access the following property:</p>
<pre>car2.owner
</pre>
                  </div>
    
    <section class="page-meta">
      
      
      
      <section id="doc-contributors" role="contentinfo">
        Contributors to this page: <a href="/en-US/profiles/Anonymous">Anonymous</a>, <a href="/en-US/profiles/Sheppy">Sheppy</a>, <a href="/en-US/profiles/Micmath">Micmath</a>, <a href="/en-US/profiles/ArthurOgawa">ArthurOgawa</a>, <a href="/en-US/profiles/ethertank">ethertank</a>, <a href="/en-US/profiles/Matej%20Lednar">Matej Lednar</a>, <a href="/en-US/profiles/kikiwiggado">kikiwiggado</a>, <a href="/en-US/profiles/Charles_Poore">Charles_Poore</a>, <a href="/en-US/profiles/Mgjbot">Mgjbot</a>, <a href="/en-US/profiles/Potappo">Potappo</a>, <a href="/en-US/profiles/Maian">Maian</a>, <a href="/en-US/profiles/Dria">Dria</a>, <a href="/en-US/profiles/adriaanlabusc">adriaanlabusc</a>
                          <br/>
          Last updated by:  
          <a href="/en-US/profiles/Sheppy">Sheppy</a>, 
          <time datetime="2013-05-28T08:33:44-07:00">May 28, 2013 8:33:44 AM</time>
                      <br/>
            Last reviewed by:  
            <a href="/en-US/profiles/Charles_Poore">Charles_Poore</a>, 
            <time datetime="2013-05-12T13:20:02-07:00">May 12, 2013 1:20:02 PM</time>
                        </section>
    </section>
  </article>
  <form id="wiki-page-edit" class="editing" method="post" action="/en-US/docs/Web/JavaScript/Reference/Operators/new$edit">
      <input type="hidden" name="form" id="form" value="rev"/>
      <input type="hidden" name="content" value="" class="entry-content"/>
  </form>
      </div>
   </div>
    </section>  


<section id="footbar">
<div class="wrap">
  <p>
  Is MDN helpful to you? Please <a href="/en-US/docs/Project:Feedback">share your feedback</a> with us. Or join our <a id="dev-mdc-link" href="//lists.mozilla.org/listinfo/dev-mdc">mailing list about improving MDN content</a>.  </p>
</div>
</section>




          
      
      
      
              
                  
  
  
      

    <!-- include syntax highlighting scripts -->
<link rel="stylesheet" media="screen,projection,tv" href="https://developer.cdn.mozilla.net/media/css/syntax-prism-min.css?build=aa6c00e"/>


        
    


</body>
</html>

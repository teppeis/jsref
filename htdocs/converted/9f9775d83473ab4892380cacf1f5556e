<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!DOCTYPE html>
<html lang="en-US" dir="ltr" id="developer-mozilla-org" xmlns:fb="http://www.facebook.com/2008/fbml" xmlns:og="http://ogp.me/ns#">


<body id="" class="html-ltr document" role="document">
<!--[if lte IE 8]>
<noscript><div class="global-notice">
<p><strong>Warning:</strong> The Mozilla Developer Network website employs emerging web standards that may not be fully supported in some versions of Microsoft Internet Explorer. You can improve your experience of this website by enabling JavaScript.</p></div></noscript>
<![endif]-->
  

    

      
  
<!-- top toolbar -->




<section class="entry-content">
  <div class="wrap">
    <div id="content-main" class="full">
      <article class="article" role="main" data-current-revision="429979" data-refresh-message="Your changes were merged. However, something else has been edited, so this page will be refreshed to reflect the changes." data-cancel-edit-message="Abort editing in progress? Your unsaved changes will be discarded.">
      <header id="article-head">
        <div class="title entry-title">
            <h1 class="page-title">Object.create</h1>
                        

            
            
                                </div>
        

        
               </header>

           
                        <div class="warning review-technical"><p>This article is in need of a technical review.</p></div>
                            
            
      <div id="wikiArticle" class="page-content boxed">
                
                                <h2 id="Summary" name="Summary">Summary</h2>
<p>Creates a new object with the specified prototype object and properties.</p>
<table class="standard-table">
  <thead>
    <tr>
      <th class="header" colspan="2">Method of <a href="/en-US/docs/JavaScript/Reference/Global_Objects/Object" title="JavaScript/Reference/Global_Objects/Object"><code>Object</code></a></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Implemented in</td>
      <td>JavaScript 1.8.5</td>
    </tr>
    <tr>
      <td>ECMAScript Edition</td>
      <td>ECMAScript 5th Edition</td>
    </tr>
  </tbody>
</table>
<h2 id="Syntax" name="Syntax">Syntax</h2>
<pre class="syntaxbox"><code>Object.create(<em>proto</em> [, <em>propertiesObject</em> ])</code></pre>
<h2 id="Parameters" name="Parameters">Parameters</h2>
<dl>
  <dt>
    proto</dt>
  <dd>
    The object which should be the prototype of the newly-created object.</dd>
  <dt>
    propertiesObject</dt>
  <dd>
    If specified and not undefined, an object whose enumerable own properties (that is, those properties defined upon itself and <em>not</em> enumerable properties along its prototype chain) specify property descriptors to be added to the newly-created object, with the corresponding property names. These properties correspond to the second argument of <a href="/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties" title="/en-US/docs/">Object.defineProperties</a><code>.</code></dd>
</dl>
<h2 id="Description" name="Description">Description</h2>
<p>Throws a <code>TypeError</code> exception if the proto parameter isn't null or an object.</p>
<h2 id="Examples" name="Examples">Examples</h2>
<h4 id="Classical_inheritance_with_Object.create">Classical inheritance with Object.create</h4>
<p>Below is an example of how to use Object.create to achieve classical inheritance. This is for single inheritance, which is all that Javascript supports.</p>
<div class="highlight">
  <pre class="brush: js">//Shape - superclass
function Shape() {
  this.x = 0;
  this.y = 0;
}

//superclass method
Shape.prototype.move = function(x, y) {
    this.x += x;
    this.y += y;
    console.info("Shape moved.");
};

// Rectangle - subclass
function Rectangle() {
  Shape.call(this); //call super constructor.
}

//subclass extends superclass
Rectangle.prototype = Object.create(Shape.prototype);
<code>Rectangle.prototype.constructor = Rectangle;</code>

var rect = new Rectangle();

rect instanceof Rectangle //true.
rect instanceof Shape //true.

rect.move(1, 1); //Outputs, "Shape moved."
</pre>
</div>
<p>If you wish to inherit from multiple objects, then mixins are a possibility.</p>
<div class="highlight">
  <pre class="brush: js">function MyClass() {
     SuperClass.call(this);
     OtherSuperClass.call(this);
}

MyClass.prototype = Object.create(SuperClass.prototype); //inherit
mixin(MyClass.prototype, OtherSuperClass.prototype); //mixin

MyClass.prototype.myMethod = function() {
     // do a thing
};
</pre>
</div>
<p>The mixin function would copy the functions from the superclass prototype to the subclass prototype, the mixin function needs to be supplied by the user. An example of a mixin like function would be <a class="external" href="http://api.jquery.com/jQuery.extend/" title="http://api.jquery.com/jQuery.extend/">jQuery.extend</a>.</p>
<h4 id="Using_&lt;propertiesObject&gt;_argument_with_Object.create">Using &lt;propertiesObject&gt; argument with Object.create</h4>
<pre class="brush: js">var o;

// create an object with null as prototype
o = Object.create(null);


o = {};
// is equivalent to:
o = Object.create(Object.prototype);


// Example where we create an object with a couple of sample properties.
// (Note that the second parameter maps keys to *property descriptors*.)
o = Object.create(Object.prototype, {
  // foo is a regular "value property"
  foo: { writable:true, configurable:true, value: "hello" },
  // bar is a getter-and-setter (accessor) property
  bar: {
    configurable: false,
    get: function() { return 10 },
    set: function(value) { console.log("Setting `o.bar` to", value) }
}});


function Constructor(){}
o = new Constructor();
// is equivalent to:
o = Object.create(Constructor.prototype);
// Of course, if there is actual initialization code in the Constructor function, the Object.create cannot reflect it


// create a new object whose prototype is a new, empty object
// and a adding single property 'p', with value 42
o = Object.create({}, { p: { value: 42 } })

// by default properties ARE NOT writable, enumerable or configurable:
o.p = 24
o.p
//42

o.q = 12
for (var prop in o) {
   console.log(prop)
}
//"q"

delete o.p
//false

//to specify an ES3 property
o2 = Object.create({}, { p: { value: 42, writable: true, enumerable: true, configurable: true } });
</pre>
<h2 id="Cross-browser_compatibility">Cross-browser compatibility</h2>
<p>Based on <a class="external" href="http://kangax.github.com/es5-compat-table/">Kangax's compat table</a>.</p>
<p/><div class="htab"> 
    <a id="AutoCompatibilityTable" name="AutoCompatibilityTable"/> 
    <ul> 
        <li class="selected"><a>Desktop</a></li> 
        <li><a>Mobile</a></li> 
    </ul> 
</div><p/>
<div id="compat-desktop">
  <table class="compat-table">
    <tbody>
      <tr>
        <th>Feature</th>
        <th>Chrome</th>
        <th>Firefox (Gecko)</th>
        <th>Internet Explorer</th>
        <th>Opera</th>
        <th>Safari</th>
      </tr>
      <tr>
        <td>Basic support</td>
        <td>5</td>
        <td>4.0 (2)</td>
        <td>9</td>
        <td>11.60</td>
        <td>5</td>
      </tr>
    </tbody>
  </table>
</div>
<div id="compat-mobile">
  <table class="compat-table">
    <tbody>
      <tr>
        <th>Feature</th>
        <th>Firefox Mobile (Gecko)</th>
        <th>Android</th>
        <th>IE Mobile</th>
        <th>Opera Mobile</th>
        <th>Safari Mobile</th>
      </tr>
      <tr>
        <td>Basic support</td>
        <td>4.0 (2)</td>
        <td><span style="color: #888;" title="Please update this with the earliest version of support.">(Yes)</span></td>
        <td><span style="color: rgb(255, 153, 0);" title="Compatibility unknown; please update this.">?</span></td>
        <td>11.50</td>
        <td><span style="color: #888;" title="Please update this with the earliest version of support.">(Yes)</span></td>
      </tr>
    </tbody>
  </table>
</div>
<h3 id="Polyfill">Polyfill</h3>
<pre class="brush: js">if (!Object.create) {
    Object.create = (function(){
        function F(){}

        return function(o){
            if (arguments.length != 1) {
                throw new Error('Object.create implementation only accepts one parameter.');
            }
            F.prototype = o
            return new F()
        }
    })()
}
</pre>
<p>This polyfill covers the main use case which is creating a new object for which the prototype has been chosen but doesn't take the second argument into account.</p>
<h2 id="See_also" name="See_also">See also</h2>
<ul>
  <li><code><a href="/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty" title="Core JavaScript 1.5 Reference/Global Objects/Object/defineProperty">Object.defineProperty</a></code></li>
  <li><a href="/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperties" title="Core JavaScript 1.5 Reference/Global Objects/Object/defineProperties">Object.defineProperties</a></li>
  <li><a href="/en-US/docs/JavaScript/Reference/Global_Objects/Object/isPrototypeOf" title="Core JavaScript 1.5 Reference/Global Objects/Object/IsPrototypeOf">Object.prototype.isPrototypeOf</a></li>
  <li>John Resig's post on <a class="external" href="http://ejohn.org/blog/objectgetprototypeof/" title="http://ejohn.org/blog/objectgetprototypeof/">getPrototypeOf</a></li>
</ul>
                  </div>
    
    <section class="page-meta">
            <section class="page-tags" id="document-tags">
        <h2><i class="icon-tags"/>Tags (7)</h2>
        <div id="deki-page-tags">
          <ul class="tags tagit ui-widget ui-widget-content">
                        <li class="tagit-choice ui-widget-content ui-state-default">
                <a class="text tagit-label" href="/en-US/docs/tag/ECMAScript5">ECMAScript5</a>
            </li>
                        <li class="tagit-choice ui-widget-content ui-state-default">
                <a class="text tagit-label" href="/en-US/docs/tag/JavaScript%201.8.5">JavaScript 1.8.5</a>
            </li>
                        <li class="tagit-choice ui-widget-content ui-state-default">
                <a class="text tagit-label" href="/en-US/docs/tag/enumerable">enumerable</a>
            </li>
                        <li class="tagit-choice ui-widget-content ui-state-default">
                <a class="text tagit-label" href="/en-US/docs/tag/prototype">prototype</a>
            </li>
                        <li class="tagit-choice ui-widget-content ui-state-default">
                <a class="text tagit-label" href="/en-US/docs/tag/editable">editable</a>
            </li>
                        <li class="tagit-choice ui-widget-content ui-state-default">
                <a class="text tagit-label" href="/en-US/docs/tag/configurable">configurable</a>
            </li>
                        <li class="tagit-choice ui-widget-content ui-state-default">
                <a class="text tagit-label" href="/en-US/docs/tag/JavaScript">JavaScript</a>
            </li>
                      </ul>
        </div>
      </section>
      
      
      
      <section id="doc-contributors" role="contentinfo">
        Contributors to this page: <a href="/en-US/profiles/Waldo">Waldo</a>, <a href="/en-US/profiles/Sheppy">Sheppy</a>, <a href="/en-US/profiles/bradleymeck">bradleymeck</a>, <a href="/en-US/profiles/evilpie">evilpie</a>, <a href="/en-US/profiles/Marcoos">Marcoos</a>, <a href="/en-US/profiles/darkowlzz">darkowlzz</a>, <a href="/en-US/profiles/Binishkaspar">Binishkaspar</a>, <a href="/en-US/profiles/aptinio">aptinio</a>, <a href="/en-US/profiles/AaronAsAChimp">AaronAsAChimp</a>, <a href="/en-US/profiles/BrianDiPalma">BrianDiPalma</a>, <a href="/en-US/profiles/wyantb">wyantb</a>, <a href="/en-US/profiles/ziyunfei">ziyunfei</a>, <a href="/en-US/profiles/-TNO-">-TNO-</a>, <a href="/en-US/profiles/apsillers">apsillers</a>, <a href="/en-US/profiles/karolk">karolk</a>, <a href="/en-US/profiles/grendel">grendel</a>, <a href="/en-US/profiles/Crash">Crash</a>, <a href="/en-US/profiles/dbruant">dbruant</a>, <a href="/en-US/profiles/modestginger">modestginger</a>, <a href="/en-US/profiles/ethertank">ethertank</a>, <a href="/en-US/profiles/Havvy">Havvy</a>, <a href="/en-US/profiles/eliranmal">eliranmal</a>
                          <br/>
          Last updated by:  
          <a href="/en-US/profiles/bradleymeck">bradleymeck</a>, 
          <time datetime="2013-06-14T05:49:27-07:00">Jun 14, 2013 5:49:27 AM</time>
                      <br/>
            Last reviewed by:  
            <a href="/en-US/profiles/bradleymeck">bradleymeck</a>, 
            <time datetime="2013-06-14T05:49:27-07:00">Jun 14, 2013 5:49:27 AM</time>
                        </section>
    </section>
  </article>
  <form id="wiki-page-edit" class="editing" method="post" action="/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create$edit">
      <input type="hidden" name="form" id="form" value="rev"/>
      <input type="hidden" name="content" value="" class="entry-content"/>
  </form>
      </div>
   </div>
    </section>  


<section id="footbar">
<div class="wrap">
  <p>
  Is MDN helpful to you? Please <a href="/en-US/docs/Project:Feedback">share your feedback</a> with us. Or join our <a id="dev-mdc-link" href="//lists.mozilla.org/listinfo/dev-mdc">mailing list about improving MDN content</a>.  </p>
</div>
</section>




          
      
      
      
              
                  
  
  
      

    <!-- include syntax highlighting scripts -->
<link rel="stylesheet" media="screen,projection,tv" href="https://developer.cdn.mozilla.net/media/css/syntax-prism-min.css?build=aa6c00e"/>


        
    


</body>
</html>
